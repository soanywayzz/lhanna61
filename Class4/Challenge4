# For this coding challenge, I want you to find a particular tool that you like in arcpy. It could be a tool that
# you have used in GIS before or something new. Try browsing the full tool list to get some insight here
# (click Tool Reference on the menu list to the left).
# Set up the tool to run in Python, add some useful comments, and importantly, provide some example
# data in your repository (try to make it open source, such as Open Streetmap, or RI GIS. You can add it as a zip
# file to your repository.
# My only requirements are:
# Comment your code well.
# Ensure that the code will run with only a single change to a single variable (i.e. a base folder location).

# import  modules
import arcpy,sys,traceback
arcpy.env.workspace = "E:\Python\Challenge4\SampleData"
#create Variable Declaration for Geoprocessing Function
outPath = "E:\Python\Challenge4\SampleData"

inFeature ="Country.shp"
clipFeature = "Towns.shp"
outfile = outPath+"Country_To_Towns.shp"
bufFeature = "E:\Python\Challenge4\SampleData\Country_To_Towns.shp"
try:
    if arcpy.Exists(outfile):
        arcpy.Delete_management(outfile) #delete  if the output already Exists
    print "Starting Clip routine"
    #parameters using variables
    arcpy.Clip_analysis(inFeature,clipFeature,outfile)
    print "Finished Clip Routine"
    if arcpy.Exists(bufFeature):
        arcpy.Delete_management(bufFeature)
    print "starting Buffer routine"
    arcpy.Buffer_analysis(outfile, bufFeature, "100 FEET", "", "")
    print "Finished Buffer Routine"
    # except:
    tb =sys.exc_info()[2]
    tbinfo =traceback.format_tb(tb) [0]
    pymsg ="python erros:\n" +tbinfo+ "\nError info:\n"
    msgs = "Arcpy Errors:\n" +arcpy.GetMessages(2) + "\n"
    arcpy.AddError(msgs)
    arcpy.AddError(pymsg)
    print msgs
    print pymsg
    arcpy.AddMessage(arcpy.GetMessages(1))
    print arcpy.GetMessages(1)

